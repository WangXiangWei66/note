“change problem”涉及确定可以由给定金额组成的所有不同方式，由给定的一组货币派别组成。例如，如果amount为20美元，面额为 5，10和20，则弥补20美元的不同方法将是：（1）四个5，（2）两张 5和一张10，（3）两张10，（4）一张 20。

我们将通过change（）函数来解决问题，该函数需要两个参数：

amount，一个非负整数，表明我们希望弥补的金额；
denom_list，一个明显的积极整数列表，指示不同的面额。
并返回整数列表列表，每个列表指示由所提供的面额组成的不同组合，总额。

对该功能的示例调用是：

>>>change（20，[5，10，20]）
[[20]，[10，10]，[5，5，10]，[5，5，5，5]]
>>>change（20，[5，10，20，50，100]）
[[20]，[10，10]，[5，5，10]，[5，5，5，5]]
>>>change（75，[5，10，20，50，100]）
[[5，20，50]，[5，10，20，20，20]，[5，10，10，50]，[5，10，10，10，10，20，20] 10，10，10，10，20]，[5，10，10，10，10，10，10，10，10]，[5，5，5，5，20，20，20] 10，50]，[5，5，5，10，10，20，20]，[5，5，5，5，10，10，10，10，10，20]，[5，5，5，5，10，10，10 10、10、10、10]，[5、5、5、5、5、50]，[5、5、5、5、5、10、20、20]，[5、5、5、5， 5、10、10、10、20]，[5、5、5、5、5、10、10、10、10、10]，[5、5、5、5、5、5、5、20， 20]，[5，5，5，5，5，5，5，5，10，10，20]，[5，5，5，5，5，5，5，5，5，10，10，10，10，10]，[ 5、5、5、5、5、5、5、5、5、10、20]，[5、5、5、5、5、5、5、5、5、10、10、10]，[ 5、5、5、5、5、5、5、5、5、5、5、20]，[5、5、5、5、5、5、5、5、5、5、5、10， 10]，[5，5，5，5，5，5，5，5，5，5，5，5，5，5，5，10]，[5，5，5，5，5，5，5，5，5，5，5， 5、5、5、5、5、5、5]]
>>>change（2，[5，10，20，50，100]）
[]

通过提供单个语句插入每个编号的框来完成代码。请注意，您的代码应在每个框指示的缩进级别上运行。


def change(amount, denom_list):
    alternatives_list = []
    rec_change(amount, denom_list, [], alternatives_list)
    #    1    


def rec_change(amount, denom_list, change_list, alternatives_list):
    if denom_list:
        denom = denom_list[0]
        #    2    
        #    3    
            #    4    
                alternatives_list.append(change_list + extra_change)
            else:
                rec_change(amount - i, denom_list[1:], change_list + extra_change, alternatives_list)
            #    5    
